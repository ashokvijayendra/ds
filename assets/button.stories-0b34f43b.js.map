{"version":3,"file":"button.stories-0b34f43b.js","sources":["../../../../libs/react/src/lib/components/button/button-wrapper.tsx","../../../../libs/react/src/lib/components/button/button.tsx"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { usePrefix } from '@carbon/react';\nimport { PolymorphicProps } from '../../utils';\n\nexport const ButtonKinds = ['primary', 'secondary'] as const;\n\nexport type ButtonKind = typeof ButtonKinds[number];\n\nexport const ButtonTooltipAlignments = ['start', 'center', 'end'] as const;\n\nexport type ButtonTooltipAlignment = typeof ButtonTooltipAlignments[number];\n\nexport const ButtonTooltipPositions = ['top', 'right', 'bottom', 'left'];\n\nexport type ButtonTooltipPosition = typeof ButtonTooltipPositions[number];\n\ninterface ButtonBaseProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * Specify if the button is an icon-only button\n   */\n  hasIconOnly?: boolean;\n\n  /**\n   * Optionally specify an href for your Button to become an `<a>` element\n   */\n  href?: string;\n\n  /**\n   * If specifying the `renderIcon` prop, provide a description for that icon that can\n   * be read by screen readers\n   */\n  iconDescription?: string;\n\n  /**\n   * Specify the kind of Button you want to create\n   */\n  kind?: ButtonKind;\n\n  /**\n   * Optional prop to allow overriding the icon rendering.\n   * Can be a React component class\n   */\n  renderIcon?: React.ElementType;\n\n  /**\n   * Specify the alignment of the tooltip to the icon-only button.\n   * Can be one of: start, center, or end.\n   */\n  tooltipAlignment?: ButtonTooltipAlignment;\n\n  /**\n   * Specify the direction of the tooltip for icon-only buttons.\n   * Can be either top, right, bottom, or left.\n   */\n  tooltipPosition?: ButtonTooltipPosition;\n}\n\nexport type ButtonProps<T extends React.ElementType> = PolymorphicProps<\n  T,\n  ButtonBaseProps\n>;\n\nexport interface ButtonComponent {\n  <T extends React.ElementType>(\n    props: ButtonProps<T>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    context?: any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): React.ReactElement<any, any> | null;\n}\n\nexport const Button = React.forwardRef(function Button<\n  T extends React.ElementType\n>(\n  {\n    as,\n    children,\n    className,\n    disabled = false,\n    hasIconOnly = false,\n    href,\n    iconDescription,\n    kind = 'primary',\n    onBlur,\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    renderIcon: ButtonImageElement,\n    size,\n    tabIndex,\n    tooltipAlignment = 'center',\n    tooltipPosition = 'top',\n    type = 'button',\n    ...rest\n  }: ButtonProps<T>,\n  ref: React.Ref<unknown>\n) {\n  const prefix = usePrefix();\n\n  const buttonClasses = classNames(className, {\n    [`${prefix}--btn`]: true,\n    [`${prefix}--btn--${kind}`]: kind,\n    [`${prefix}--btn--disabled`]: disabled,\n    [`${prefix}--btn--icon-only`]: hasIconOnly,\n  });\n\n  const commonProps = {\n    tabIndex,\n    className: buttonClasses,\n    ref,\n  };\n\n  const buttonImage = !ButtonImageElement ? null : (\n    <ButtonImageElement\n      aria-label={iconDescription}\n      className={`${prefix}--btn__icon`}\n      aria-hidden=\"true\"\n    />\n  );\n\n  const iconOnlyImage = !ButtonImageElement ? null : <ButtonImageElement />;\n\n  let component: React.ElementType = 'button';\n  let otherProps: Partial<ButtonBaseProps> = {\n    disabled,\n    type,\n  };\n\n  const anchorProps = {\n    href,\n  };\n\n  if (href && !disabled) {\n    component = 'a';\n    otherProps = anchorProps;\n  }\n\n  children = iconOnlyImage ? iconOnlyImage : children;\n\n  return React.createElement(\n    component,\n    {\n      onMouseEnter,\n      onMouseLeave,\n      onFocus,\n      onBlur,\n      onClick,\n      ...rest,\n      ...commonProps,\n      ...otherProps,\n    },\n    children,\n    buttonImage\n  );\n});\n\nButton.displayName = 'Button';\nButton.propTypes = {\n  /**\n   * Specify how the button itself should be rendered.\n   * Make sure to apply all props to the root node and render children appropriately\n   */\n  as: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.elementType,\n  ]),\n\n  /**\n   * Specify the content of your Button\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be added to your Button\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the Button should be disabled, or not\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify if the button is an icon-only button\n   */\n  hasIconOnly: PropTypes.bool,\n\n  /**\n   * Optionally specify an href for your Button to become an `<a>` element\n   */\n  href: PropTypes.string,\n\n  /**\n   * If specifying the `renderIcon` prop, provide a description for that icon that can\n   * be read by screen readers\n   */\n  iconDescription: (props) => {\n    /* istanbul ignore next */\n    if (props.renderIcon && !props.children && !props.iconDescription) {\n      return new Error(\n        'renderIcon property specified without also providing an iconDescription property.'\n      );\n    }\n    return null;\n  },\n\n  /**\n   * Specify the kind of Button you want to create\n   */\n  kind: PropTypes.oneOf(ButtonKinds),\n\n  /**\n   * Provide an optional function to be called when the button element\n   * loses focus\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Provide an optional function to be called when the button element\n   * is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Provide an optional function to be called when the button element\n   * receives focus\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Provide an optional function to be called when the mouse\n   * enters the button element\n   */\n  onMouseEnter: PropTypes.func,\n\n  /**\n   * Provide an optional function to be called when the mouse\n   * leaves the button element\n   */\n  onMouseLeave: PropTypes.func,\n\n  /**\n   * Optional prop to allow overriding the icon rendering.\n   * Can be a React component class\n   */\n  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Optional prop to specify the role of the Button\n   */\n  role: PropTypes.string,\n\n  /**\n   * Optional prop to specify the tabIndex of the Button\n   */\n  tabIndex: PropTypes.number,\n\n  /**\n   * Specify the alignment of the tooltip to the icon-only button.\n   * Can be one of: start, center, or end.\n   */\n  tooltipAlignment: PropTypes.oneOf(['start', 'center', 'end']),\n\n  /**\n   * Specify the direction of the tooltip for icon-only buttons.\n   * Can be either top, right, bottom, or left.\n   */\n  tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n\n  /**\n   * Optional prop to specify the type of the Button\n   */\n  type: PropTypes.oneOf(['button', 'reset', 'submit']),\n};\n\nexport default Button as ButtonComponent;\n","import React, { MouseEventHandler } from 'react';\nimport { Button } from './button-wrapper';\nexport interface MyButtonProps {\n  children?: React.ReactNode;\n  secondaryLabel?: string;\n  variant?: 'primary' | 'secondary';\n  className?: string;\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  type?: 'button' | 'submit' | 'reset';\n  hasIconOnly?: boolean;\n  iconPosition?: 'left' | 'right' | '';\n  href?: string;\n  renderIcon?: React.ReactNode;\n}\n\nexport const WagButton = React.forwardRef(\n  (\n    {\n      children,\n      secondaryLabel,\n      variant = 'primary',\n      className,\n      onClick,\n      type = 'button',\n      hasIconOnly,\n      iconPosition = '',\n      renderIcon,\n      href,\n      ...restProps\n    }: MyButtonProps,\n    ref: React.Ref<unknown>\n  ) => {\n    const label = (\n      <>\n        {children}\n        {secondaryLabel && <span>{secondaryLabel}</span>}\n      </>\n    );\n    \n    const buttonContent = () => {\n      if (renderIcon) {\n        if (hasIconOnly) return renderIcon;\n        if (!iconPosition || iconPosition === 'left') {\n          return (\n            <>\n              {renderIcon}\n              {label}\n            </>\n          );\n        } else {\n          return (\n            <>\n              {label}\n              {renderIcon}\n            </>\n          );\n        }\n      } else {\n        return label;\n      }\n    };\n\n    return (\n      <Button\n        onClick={onClick}\n        className={className}\n        kind={variant}\n        type={type}\n        hasIconOnly={hasIconOnly}\n        iconDescription=\"\"\n        href={href || ''}\n        {...restProps}\n        ref={ref}\n        isdisabled=\"true\"\n      >\n        {buttonContent()}\n      </Button>\n    );\n  }\n);\n\nWagButton.defaultProps = {\n  secondaryLabel: '',\n  className: '',\n  variant: 'primary' as const,\n};\n\nWagButton.displayName = 'WagButton';\n\nexport default WagButton;\n"],"names":["ButtonKinds","Button","React","as","children","className","disabled","hasIconOnly","href","iconDescription","kind","onBlur","onClick","onFocus","onMouseEnter","onMouseLeave","ButtonImageElement","size","tabIndex","tooltipAlignment","tooltipPosition","type","rest","ref","prefix","usePrefix","buttonClasses","classNames","commonProps","buttonImage","jsx","iconOnlyImage","component","otherProps","anchorProps","PropTypes","props","WagButton","secondaryLabel","variant","iconPosition","renderIcon","restProps","label","jsxs","Fragment"],"mappings":"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"}